#!/usr/bin/env python3

#Name: fingerPrinter.py
#Date: 31 Mar 2021
#Author: Christopher Velez
#
#Description: The purpose of this script is to automate initial fingerprinting of malware. Functions include identifying the file, md5sum, sha256sum, sha512sum, as well as the VT output (if any) and related strings
#
#Revisions:
#		20210331: Initial

import magic
import argparse
import hashlib
import requests
import json
import sys

def getArgs():
	"""Get command line arguments"""

	parser = argparse.ArgumentParser(description='Malware fingerprinting tool', formatter_class=argparse.ArgumentDefaultsHelpFormatter)

	parser.add_argument('sampleName', metavar='<sample>', help='Sample to be analyzed')

	return parser.parse_args()

def createFile():
	"""Function to create csv file"""

def jprint(obj):
	text = json.dumps(obj, sort_keys=True, indent=4)
	print(text)

def analyze(sample):
	"""Function to analyze the sample"""
	print('[DEBUG] in analyze function \n')


	#Fingerprint the file type
	m = magic.open(magic.MAGIC_NONE)
	m.load()
	fileType=m.file(sample)
	print(f'File type of {sample}: \t {fileType}')

	#generate md5sum of the sample
	fileContent = open(sample,"rb").read()
	md5sum = hashlib.md5(fileContent).hexdigest()
	sha256sum = hashlib.sha256(fileContent).hexdigest()
	sha1sum = hashlib.sha1(fileContent).hexdigest()
	print(f'md5sum of {sample}: \t {md5sum}')
	print(f'sha256sum of {sample}: \t {sha256sum}')
	print(f'sha1sum of {sample}: \t {sha1sum}')

	virusTotal_Output(sha256sum)

def virusTotal_Output(sha256sum):
	"""Function to house Virus Total detection output, if any"""
	vtUrl = "https://www.virustotal.com/api/v3/files/" + sha256sum
	#apiKey = "<your Virus Total API key here>"
	
	headers = {'x-apikey': apiKey}

	r = requests.get(vtUrl, headers=headers)
	status=r.status_code

	if status == 200:
		detections = r.json()['data']['attributes']['last_analysis_stats']['malicious']
		scanResults = r.json()['data']['attributes']['last_analysis_results']
		print(f'Detections: \t\t {detections}/70')
		print('Virus Total Results: ')
		jprint(r.json()['data']['attributes']['last_analysis_results'])

	else:
		print(f'No AV detections For: {sha256sum}')


def main():
	args = getArgs()

	sample = args.sampleName

	analyze(sample)


if __name__ == '__main__':
	main()